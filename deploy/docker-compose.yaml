version: "2.0"

volumes:
  mongo-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./mongo/data

  user-service-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./user-service

  postgresql-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./postgresql/data

  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-service
services:
  mongo:
    image: mongo:7.0
    volumes:
      - mongo-data:/data/db
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}

  postgresql:
    image: postgres:12
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/db-files/
    ports:
      - 5432:5432

  rabbitmq:
    image: rabbitmq:3.13.0-rc.1-management-alpine
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"

  library-service:
    build:
      context: ../service/library-service
      dockerfile: ./Dockerfile
    ports:
      - "5000:5000"
    environment:
      PG_DSN: ${PG_DSN}
    depends_on:
      - postgresql
      
  forum-service:
    build:
      context: ../service/forum-service
      dockerfile: ./Dockerfile
    ports:
      - "5010:5010"
    environment:
      PG_DSN: ${PG_DSN}
    depends_on:
      - postgresql

  user-service:
    build:
      context: ../service/user-service
      dockerfile: ./Dockerfile
    ports:
      - "5020:5020"
    environment:
      PG_DSN: ${PG_ADSN}
      JWT_SECRET: ${JWT_SECRET}
      RESET_PASSWORD_TOKEN_SECRET: ${RESET_PASSWORD_TOKEN_SECRET}
      VERIFICATION_TOKEN_SECRET: ${VERIFICATION_TOKEN_SECRET}
      DEFAULT_GROUPS_CONFIG_PATH: ${DEFAULT_GROUPS_CONFIG_PATH}
    depends_on:
      - postgresql
    volumes:
      - user-service-data:/mnt/

  complaint-service:
    build:
      context: ../service/complaint-service
      dockerfile: ./Dockerfile
    ports:
      - "5030:5030"
    environment:
      MONGO_DSN: ${MONGO_DSN}
      RABBITMQ_DSN: ${RABBITMQ_DSN}
    depends_on:
      - mongo
  
  policy-enforcement-service:
    build:
      context: ../service/policy-enforcement-service
      dockerfile: ./Dockerfile
    ports:
      - "5100:5100"
    volumes:
      - policy-enforcement-data:/mnt/
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH}
    depends_on:
      - telegram-service
      - complaint-service
      - user-service
      - forum-service
      - library-service

  telegram-service:
    build:
      context: ../service/telegram-service
      dockerfile: ./Dockerfile
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_DSN: ${RABBITMQ_DSN}
      TELEGRAM_CHAT_IDS: ${TELEGRAM_CHAT_IDS}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
  testing:
    build:
      context: ../tests
      dockerfile: ./Dockerfile
    depends_on:
      - library-service